/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cobertura_de_sucursales;

/**
 *
 * @author pablo
 */
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileReader;
import java.io.IOException;

public class Cobertura_de_sucursales extends javax.swing.JFrame {

    private Grafo redTransporteActual;

    /**
     * Creates new form Cobertura_de_sucursales
     */
    public Cobertura_de_sucursales() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.redTransporteActual = new Grafo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        cargarRedDesdeArchivo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("¡ BIENVENIDO A C.D.S inc !");

        jButton1.setText("Ver Grafo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ingresa");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cargarRedDesdeArchivo.setText("Cargar nuevo archivo");
        cargarRedDesdeArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarRedDesdeArchivoActionPerformed(evt);
            }
        });

        jLabel2.setText("¿Qué desea hacer?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(42, 42, 42))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cargarRedDesdeArchivo)
                            .addComponent(jLabel1))))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cargarRedDesdeArchivo)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarRedDesdeArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarRedDesdeArchivoActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos JSON", "json");
        fileChooser.setFileFilter(filter);

        int resultado = fileChooser.showOpenDialog(null);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            Lista<Parada> nodosParadas = new Lista();
            try (FileReader reader = new FileReader(fileChooser.getSelectedFile())) {
                JsonParser parser = new JsonParser();
                JsonObject sistemaDeTransporteOjeto = parser.parse(reader).getAsJsonObject();
                for (var claveValor : sistemaDeTransporteOjeto.entrySet()) {
                    String nombreSisTransporte = claveValor.getKey();
                    this.redTransporteActual.setNombreRedTransporte(nombreSisTransporte);
                    for (var lineaObjeto : claveValor.getValue().getAsJsonArray()) {
                        for (var lineaClaveValor : lineaObjeto.getAsJsonObject().entrySet()) {
                            JsonArray paradas = lineaClaveValor.getValue().getAsJsonArray();
                            for (var paradaElemento : paradas) {
                                if (paradaElemento.isJsonPrimitive()) {
                                    String paradaMetro = paradaElemento.getAsString();
                                    Nodo<Parada> aux = nodosParadas.getpFirst();
                                    boolean encontrado = false;
                                    while (aux != null) {
                                      if (aux.getData().getNombre().equals(paradaMetro)){
                                      encontrado = true;
                                      break;
                                      } 
                                     
                                        aux = aux.getpNext();
                                    }
                                    if (encontrado == false){
                                     Parada parada = new Parada(paradaMetro, lineaClaveValor.getKey());
                                   if (nodosParadas.getpLast() != null){
                                        parada.getSiguientes().InsertarFinal(nodosParadas.getpLast().getData());
                                        nodosParadas.getpLast().getData().getSiguientes().InsertarFinal(parada);
                                   } 
                                    nodosParadas.InsertarFinal(parada);  
                                    }
                                   
                                } else if (paradaElemento.isJsonObject()) {
                                    var Conexion = paradaElemento.getAsJsonObject();
                                    for (var ConexionClaveValor : Conexion.entrySet()) {
                                        String Estacion1 = ConexionClaveValor.getKey();
                                        
                                        String Estacion2 = ConexionClaveValor.getValue().getAsString();
                                    }
                                }
                            }
                        }
                    }

                }
                this.redTransporteActual.setParadas(nodosParadas);
            } catch (IOException e) {
                System.err.println("Error al cargar el archivo: " + e.getMessage());
            }
        } else {
            System.out.println("No se seleccionó ningún archivo.");
        }
    }//GEN-LAST:event_cargarRedDesdeArchivoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Interfaz3 b = new Interfaz3();
        b.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Interfaz2 a = new Interfaz2();
        a.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cobertura_de_sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cobertura_de_sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cobertura_de_sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cobertura_de_sucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cobertura_de_sucursales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargarRedDesdeArchivo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
